package it.polito.ezshop.model;

import it.polito.ezshop.data.BalanceOperation;
import it.polito.ezshop.data.SaleTransaction;
import it.polito.ezshop.data.TicketEntry;
import it.polito.ezshop.exceptions.InvalidProductCodeException;

import java.time.LocalDate;
import java.util.*;

public class SaleTransactionObject implements SaleTransaction {
    private String status; //allowed status are new(contain no objects), open(contain some objects), closed(transaction closed), payed(transaction payed), abort(transaction closed but aborted)
    private Integer ticketNumber;
    private List <TicketEntry> items;
    private double discountRate;
    private LocalDate date;
    private double price;

    public SaleTransactionObject(Integer transactionId) {
        this.status = "open";
        this.ticketNumber = transactionId;
        this.items = new ArrayList<>();
        this.discountRate = 0;
        this.date = LocalDate.now();
    }

    public SaleTransactionObject(SaleTransactionObject st) {
        this.status = st.status;
        this.ticketNumber = st.ticketNumber;
        this.items = st.items;
        this.discountRate = st.discountRate;
        this.date = st.date;
        this.price = st.price;
    }

    public String getStatus(){ return status; }

    public LocalDate getDate(){
        return date;
    }

    public void setDate(LocalDate newDate){ this.date = newDate; }

    @Override
    public Integer getTicketNumber() {
        return ticketNumber;
    }

    @Override
    public void setTicketNumber(Integer ticketNumber) {
        this.ticketNumber = ticketNumber;
    }

    @Override
    public List<TicketEntry> getEntries() {
        return items;
    }

    @Override
    public void setEntries(List<TicketEntry> entries) {
        items.addAll(entries);
    }

    /**
     * Given a ticket entry add it to entries list. If present, increases the
     * product amount of the product into the ticket entry.
     *
     * @param entry A ticket entry is generated by the method addProductToTransaction() in PaymentController
     */
    public void addEntry(TicketEntry entry){
        items.add(entry);
    }

    public TicketEntry getEntry(String productCode){
        for(TicketEntry te: items)
            if(te.getBarCode().equals(productCode)) return te;
       return null;
    }

    public boolean deleteEntry(String productCode){
           int count= 0;
            for(TicketEntry te: items) {
                if (te.getBarCode().equals(productCode)) {
                    items.remove(count);
                    return true;
                }
                count++;
            }
        return false;
    }

    @Override
    public double getDiscountRate() {
        return discountRate;
    }

    @Override
    public void setDiscountRate(double discountRate) {
        this.discountRate = discountRate;
    }


    @Override
    public double getPrice() {
        return this.price*(1-discountRate);
    }

    @Override
    public void setPrice(double price) {
        this.price = price;
    }


    public boolean close(){
        if(this.isOpen()) {
            this.status = "closed";
            return true;
        }
        else return  false;
    }

    public boolean paymentIssued(){
        if(this.isClosed()){
            this.status = "payed";
            return true;
        }
        else return false;
    }

    public boolean paymentRollback(){
        if(this.isPayed()) {
            this.status = "closed";
            return true;
        }
        return false;
    }

    public boolean isClosed() {
        return this.status.equals("closed");
    }
    public boolean isPayed() {
        return this.status.equals("payed");
    }
    @Override
    public boolean isOpen(){
        return this.status.equals("open");
    }
}
